{"ast":null,"code":"// import React, { useCallback, useEffect, useState } from \"react\";\n// import InfiniteScroll from \"react-infinite-scroller\";\n// import { Box, CircularProgress, Container, Paper, TableBody, TableContainer } from \"@mui/material\";\n// import { Modal } from \"./components/Modal\";\n// import { UsersData } from \"./components/UsersData/UsersData\";\n// import { ModalContext } from \"./modal-context\";\n// import { dataByPage } from \"./api/constants/const\";\n// import { BASE_URL, client } from \"./api/fetch\";\n// import { User } from \"./types/User\";\n// import \"./index.scss\";\n// export const App: React.FC = () => {\n//   const [users, setUsers] = useState<User[]>([]);\n//   const [, setError] = useState(\"\");\n//   const [page, setPage] = useState(0);\n//   const [hasMore, setHasMore] = useState(false);\n//   const [modalContextValue, setModalContextValue] = useState<User>();\n//   const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n//   const [isCreate, setIsCreate] = useState<boolean>(false);\n//   const addUser = useCallback((user: User) => {\n//     setUsers((prevUsers) => [user, ...prevUsers]);\n//   }, []);\n//   const loadMoreUsers = async () => {\n//     const res = await client.get<User>(`?_page=${page + 1}&_limit=${dataByPage}`);\n//     await setUsers((prevList) => {\n//       return [...prevList, ...res];\n//     });\n//     if (!res) {\n//       setError(\"error\");\n//     } else {\n//       setPage((prev) => prev + 1);\n//     }\n//     //   .then((res) => {\n//     //     setUsers((prevList) => [...prevList, ...res]);\n//     //   })\n//     //   .catch((e) => setError(e))\n//     //   .finally(() => setPage((prev) => prev + 1));\n//   };\n//   useEffect(() => {\n//     fetch(`${BASE_URL}?_page=${1}&_limit=${dataByPage}`)\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(`error with db ${response.statusText}`);\n//         }\n//         const total = Number(response.headers.get(\"X-Total-Count\"));\n//         setHasMore(total > page * dataByPage);\n//       })\n//       .catch((e) => setError(e));\n//   }, [page]);\n//   return (\n//     <Container maxWidth=\"md\" sx={{ pb: \"20px\" }}>\n//       <ModalContext.Provider\n//         value={{\n//           create: isCreate,\n//           open: isModalOpen,\n//           setCreate: setIsCreate,\n//           setItem: setModalContextValue,\n//           setOpen: setIsModalOpen,\n//           addUser: addUser,\n//         }}\n//       >\n//         <InfiniteScroll\n//           pageStart={1}\n//           loadMore={loadMoreUsers}\n//           hasMore={hasMore}\n//           loader={\n//             <Box\n//               sx={{\n//                 display: \"flex\",\n//                 margin: \"20px\",\n//                 alignItems: \"center\",\n//                 justifyContent: \"center\",\n//               }}\n//               key={`${page * dataByPage}`}\n//             >\n//               <CircularProgress />\n//             </Box>\n//           }\n//         >\n//           <TableContainer component={Paper} elevation={3}>\n//             <TableBody>\n//               <UsersData users={users} />\n//             </TableBody>\n//           </TableContainer>\n//         </InfiniteScroll>\n//         {isModalOpen ? <Modal /> : null}\n//       </ModalContext.Provider>\n//     </Container>\n//   );\n// };","map":{"version":3,"sources":["/Users/macbook/Desktop/darly-solutions/src/App.tsx"],"names":[],"mappings":"AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { useCallback, useEffect, useState } from \"react\";\n\n// import InfiniteScroll from \"react-infinite-scroller\";\n// import { Box, CircularProgress, Container, Paper, TableBody, TableContainer } from \"@mui/material\";\n\n// import { Modal } from \"./components/Modal\";\n// import { UsersData } from \"./components/UsersData/UsersData\";\n// import { ModalContext } from \"./modal-context\";\n\n// import { dataByPage } from \"./api/constants/const\";\n// import { BASE_URL, client } from \"./api/fetch\";\n\n// import { User } from \"./types/User\";\n// import \"./index.scss\";\n\n// export const App: React.FC = () => {\n//   const [users, setUsers] = useState<User[]>([]);\n//   const [, setError] = useState(\"\");\n//   const [page, setPage] = useState(0);\n//   const [hasMore, setHasMore] = useState(false);\n\n//   const [modalContextValue, setModalContextValue] = useState<User>();\n//   const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n//   const [isCreate, setIsCreate] = useState<boolean>(false);\n\n//   const addUser = useCallback((user: User) => {\n//     setUsers((prevUsers) => [user, ...prevUsers]);\n//   }, []);\n\n//   const loadMoreUsers = async () => {\n//     const res = await client.get<User>(`?_page=${page + 1}&_limit=${dataByPage}`);\n\n//     await setUsers((prevList) => {\n//       return [...prevList, ...res];\n//     });\n\n//     if (!res) {\n//       setError(\"error\");\n//     } else {\n//       setPage((prev) => prev + 1);\n//     }\n\n//     //   .then((res) => {\n//     //     setUsers((prevList) => [...prevList, ...res]);\n//     //   })\n//     //   .catch((e) => setError(e))\n//     //   .finally(() => setPage((prev) => prev + 1));\n//   };\n\n//   useEffect(() => {\n//     fetch(`${BASE_URL}?_page=${1}&_limit=${dataByPage}`)\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(`error with db ${response.statusText}`);\n//         }\n\n//         const total = Number(response.headers.get(\"X-Total-Count\"));\n\n//         setHasMore(total > page * dataByPage);\n//       })\n//       .catch((e) => setError(e));\n//   }, [page]);\n\n//   return (\n//     <Container maxWidth=\"md\" sx={{ pb: \"20px\" }}>\n//       <ModalContext.Provider\n//         value={{\n//           create: isCreate,\n//           open: isModalOpen,\n//           setCreate: setIsCreate,\n//           setItem: setModalContextValue,\n//           setOpen: setIsModalOpen,\n//           addUser: addUser,\n//         }}\n//       >\n//         <InfiniteScroll\n//           pageStart={1}\n//           loadMore={loadMoreUsers}\n//           hasMore={hasMore}\n//           loader={\n//             <Box\n//               sx={{\n//                 display: \"flex\",\n//                 margin: \"20px\",\n//                 alignItems: \"center\",\n//                 justifyContent: \"center\",\n//               }}\n//               key={`${page * dataByPage}`}\n//             >\n//               <CircularProgress />\n//             </Box>\n//           }\n//         >\n//           <TableContainer component={Paper} elevation={3}>\n//             <TableBody>\n//               <UsersData users={users} />\n//             </TableBody>\n//           </TableContainer>\n//         </InfiniteScroll>\n//         {isModalOpen ? <Modal /> : null}\n//       </ModalContext.Provider>\n//     </Container>\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}