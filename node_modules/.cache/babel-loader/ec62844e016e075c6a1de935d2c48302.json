{"ast":null,"code":"export const BASE_URL = \"http://localhost:3004/users\";\n\nfunction request(url, method = \"GET\", data = null) {\n  const options = {\n    method\n  };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      \"Content-Type\": \"application/json; charset=UTF-8\"\n    };\n  }\n\n  return fetch(BASE_URL + url, options).then(response => {\n    if (!response.ok) {\n      throw new Error(`error with db ${response.statusText}`);\n    }\n\n    return response.json();\n  });\n}\n\nexport const client = {\n  get: url => request(url),\n  post: (url, data) => request(url, \"POST\", data)\n};","map":{"version":3,"sources":["/Users/macbook/Desktop/darly-solutions/src/api/fetch.ts"],"names":["BASE_URL","request","url","method","data","options","body","JSON","stringify","headers","fetch","then","response","ok","Error","statusText","json","client","get","post"],"mappings":"AAEA,OAAO,MAAMA,QAAQ,GAAG,6BAAjB;;AAIP,SAASC,OAAT,CACEC,GADF,EAEEC,MAAqB,GAAG,KAF1B,EAGEC,IAAiB,GAAG,IAHtB,EAIc;AACZ,QAAMC,OAAoB,GAAG;AAAEF,IAAAA;AAAF,GAA7B;;AAEA,MAAIC,IAAJ,EAAU;AACRC,IAAAA,OAAO,CAACC,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAf;AACAC,IAAAA,OAAO,CAACI,OAAR,GAAkB;AAChB,sBAAgB;AADA,KAAlB;AAGD;;AAED,SAAOC,KAAK,CAACV,QAAQ,GAAGE,GAAZ,EAAiBG,OAAjB,CAAL,CAA+BM,IAA/B,CAAqCC,QAAD,IAAc;AACvD,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,YAAM,IAAIC,KAAJ,CAAW,iBAAgBF,QAAQ,CAACG,UAAW,EAA/C,CAAN;AACD;;AAED,WAAOH,QAAQ,CAACI,IAAT,EAAP;AACD,GANM,CAAP;AAOD;;AAED,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAShB,GAAP,IAAuBD,OAAO,CAASC,GAAT,CADf;AAEpBiB,EAAAA,IAAI,EAAE,CAAOjB,GAAP,EAAoBE,IAApB,KAAqCH,OAAO,CAASC,GAAT,EAAc,MAAd,EAAsBE,IAAtB;AAF9B,CAAf","sourcesContent":["import { User } from \"../types/User\";\n\nexport const BASE_URL = \"http://localhost:3004/users\";\n\ntype RequestMethod = \"GET\" | \"POST\";\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = \"GET\",\n  data: User | null = null\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      \"Content-Type\": \"application/json; charset=UTF-8\",\n    };\n  }\n\n  return fetch(BASE_URL + url, options).then((response) => {\n    if (!response.ok) {\n      throw new Error(`error with db ${response.statusText}`);\n    }\n\n    return response.json();\n  });\n}\n\nexport const client = {\n  get: <User>(url: string) => request<User[]>(url),\n  post: <User>(url: string, data: User[]) => request<User[]>(url, \"POST\", data),\n};\n"]},"metadata":{},"sourceType":"module"}